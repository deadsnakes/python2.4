#! /bin/sh -e

# DP: Reapply all changes from the 2.4 branch, which were reverted upstream
# DP: for the 2.4.5 security release (documentation parts).

dir=
if [ $# -eq 3 -a "$2" = '-d' ]; then
    pdir="-d $3"
    dir="$3/"
elif [ $# -ne 1 ]; then
    echo >&2 "usage: `basename $0`: -patch|-unpatch [-d <srcdir>]"
    exit 1
fi
case "$1" in
    -patch)
        patch $pdir -f --no-backup-if-mismatch -R -p0 < $0
        autoconf
        ;;
    -unpatch)
        patch $pdir -f --no-backup-if-mismatch -p0 < $0
        rm -f configure
        ;;
    *)
	echo >&2 "usage: `basename $0`: -patch|-unpatch [-d <srcdir>]"
        exit 1
esac
exit 0

# svn diff http://svn.python.org/projects/python/tags/r245 http://svn.python.org/projects/python/branches/release24-maint
# diff -urN --exclude=.svn Python-2.4.5 svn

Index: Doc/lib/liblogging.tex
===================================================================
--- Doc/lib/liblogging.tex	(revision 61178)
+++ Doc/lib/liblogging.tex	(revision 61179)
@@ -429,10 +429,8 @@
 \end{methoddesc}
 
 \begin{methoddesc}{findCaller}{}
-Finds the caller's source filename and line number. Returns the filename,
-line number and function name as a 3-element tuple.
-\versionchanged[The function name was added. In earlier versions, the
-filename and line number were returned as a 2-element tuple.]{2.4}
+Finds the caller's source filename and line number. Returns the filename
+and line number as a 2-element tuple.
 \end{methoddesc}
 
 \begin{methoddesc}{handle}{record}
@@ -1082,11 +1080,8 @@
 communicate with a remote \UNIX{} machine whose address is given by
 \var{address} in the form of a \code{(\var{host}, \var{port})}
 tuple.  If \var{address} is not specified, \code{('localhost', 514)} is
-used.  The address is used to open a UDP socket.  An alternative to providing
-a \code{(\var{host}, \var{port})} tuple is providing an address as a string,
-for example "/dev/log". In this case, a Unix domain socket is used to send
-the message to the syslog. If \var{facility} is not specified,
-\constant{LOG_USER} is used.
+used.  The address is used to open a UDP socket.  If \var{facility} is
+not specified, \constant{LOG_USER} is used.
 \end{classdesc}
 
 \begin{methoddesc}{close}{}
Index: Doc/lib/libsubprocess.tex
===================================================================
--- Doc/lib/libsubprocess.tex	(revision 61178)
+++ Doc/lib/libsubprocess.tex	(revision 61179)
@@ -12,6 +12,9 @@
 codes.  This module intends to replace several other, older modules
 and functions, such as:
 
+% XXX Should add pointers to this module to at least the popen2
+% and commands sections.
+
 \begin{verbatim}
 os.system
 os.spawn*
Index: Doc/lib/libasyncore.tex
===================================================================
--- Doc/lib/libasyncore.tex	(revision 61178)
+++ Doc/lib/libasyncore.tex	(revision 61179)
@@ -199,11 +199,9 @@
 \end{methoddesc}
 
 \begin{methoddesc}{bind}{address}
-  Bind the socket to \var{address}.  The socket must not already be
-  bound.  (The format of \var{address} depends on the address family
-  --- see above.)  To mark the socket as re-usable (setting the
-  \constant{SO_REUSEADDR} option), call the \class{dispatcher}
-  object's \method{set_reuse_addr()} method.
+  Bind the socket to \var{address}.  The socket must not already
+  be bound.  (The format of \var{address} depends on the address
+  family --- see above.)
 \end{methoddesc}
 
 \begin{methoddesc}{accept}{}
Index: Doc/lib/libos.tex
===================================================================
--- Doc/lib/libos.tex	(revision 61178)
+++ Doc/lib/libos.tex	(revision 61179)
@@ -357,10 +357,6 @@
 errors), \code{None} is returned.
 Availability: Macintosh, \UNIX, Windows.
 
-The \module{subprocess} module provides more powerful facilities for
-spawning new processes and retrieving their results; using that module
-is preferable to using this function.
-
 \versionchanged[This function worked unreliably under Windows in
   earlier versions of Python.  This was due to the use of the
   \cfunction{_popen()} function from the libraries provided with
@@ -375,13 +371,8 @@
 Availability: Macintosh, \UNIX, Windows.
 \end{funcdesc}
 
-There are a number of different \function{popen*()} functions that
-provide slightly different ways to create subprocesses.  Note that the
-\module{subprocess} module is easier to use and more powerful;
-consider using that module before writing code using the
-lower-level \function{popen*()} functions.
 
-For each of the \function{popen*()} variants, if \var{bufsize} is
+For each of the following \function{popen()} variants, if \var{bufsize} is
 specified, it specifies the buffer size for the I/O pipes.
 \var{mode}, if provided, should be the string \code{'b'} or
 \code{'t'}; on Windows this is needed to determine whether the file
@@ -1513,13 +1504,7 @@
 \funcline{spawnve}{mode, path, args, env}
 \funcline{spawnvp}{mode, file, args}
 \funcline{spawnvpe}{mode, file, args, env}
-Execute the program \var{path} in a new process.  
-
-(Note that the \module{subprocess} module provides more powerful
-facilities for spawning new processes and retrieving their results;
-using that module is preferable to using these functions.)
-
-If \var{mode} is
+Execute the program \var{path} in a new process.  If \var{mode} is
 \constant{P_NOWAIT}, this function returns the process ID of the new
 process; if \var{mode} is \constant{P_WAIT}, returns the process's
 exit code if it exits normally, or \code{-\var{signal}}, where
@@ -1647,10 +1632,6 @@
 a non-native shell, consult your shell documentation.
 
 Availability: Macintosh, \UNIX, Windows.
-
-The \module{subprocess} module provides more powerful facilities for
-spawning new processes and retrieving their results; using that module
-is preferable to using this function.
 \end{funcdesc}
 
 \begin{funcdesc}{times}{}
Index: Doc/lib/libpopen2.tex
===================================================================
--- Doc/lib/libpopen2.tex	(revision 61178)
+++ Doc/lib/libpopen2.tex	(revision 61179)
@@ -11,10 +11,10 @@
 input/output/error pipes and obtain their return codes under
 \UNIX{} and Windows.
 
-The \module{subprocess} module provides more powerful facilities for
-spawning new processes and retrieving their results.  Using the
-\module{subprocess} module is preferable to using the \module{popen2}
-module.
+Note that starting with Python 2.0, this functionality is available
+using functions from the \refmodule{os} module which have the same
+names as the factory functions here, but the order of the return
+values is more intuitive in the \refmodule{os} module variants.
 
 The primary interface offered by this module is a trio of factory
 functions.  For each of these, if \var{bufsize} is specified, 
@@ -184,7 +184,3 @@
 separate threads to read each of the individual files provided by
 whichever \function{popen*()} function or \class{Popen*} class was
 used.
-
-\begin{seealso}
-  \seemodule{subprocess}{Module for spawning and managing subprocesses.}
-\end{seealso}
Index: Doc/lib/libcommands.tex
===================================================================
--- Doc/lib/libcommands.tex	(revision 61178)
+++ Doc/lib/libcommands.tex	(revision 61179)
@@ -12,11 +12,6 @@
 return any output generated by the command and, optionally, the exit
 status.
 
-The \module{subprocess} module provides more powerful facilities for
-spawning new processes and retrieving their results.  Using the
-\module{subprocess} module is preferable to using the \module{commands}
-module.
-
 The \module{commands} module defines the following functions:
 
 
@@ -56,7 +51,3 @@
 >>> commands.getstatus('/bin/ls')
 '-rwxr-xr-x  1 root        13352 Oct 14  1994 /bin/ls'
 \end{verbatim}
-
-\begin{seealso}
-  \seemodule{subprocess}{Module for spawning and managing subprocesses.}
-\end{seealso}
Index: Doc/api/concrete.tex
===================================================================
--- Doc/api/concrete.tex	(revision 61178)
+++ Doc/api/concrete.tex	(revision 61179)
@@ -2730,10 +2730,10 @@
 Various date and time objects are supplied by the \module{datetime}
 module.  Before using any of these functions, the header file
 \file{datetime.h} must be included in your source (note that this is
-not included by \file{Python.h}), and the macro
-\cfunction{PyDateTime_IMPORT} must be invoked.  The macro puts a
-pointer to a C structure into a static variable, 
-\code{PyDateTimeAPI}, that is used by the following macros.
+not include by \file{Python.h}), and macro \cfunction{PyDateTime_IMPORT()}
+must be invoked.  The macro arranges to put a pointer to a C structure
+in a static variable \code{PyDateTimeAPI}, which is used by the following
+macros.
 
 Type-check macros:
 
